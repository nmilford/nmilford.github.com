<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Configurations | blog.milford.io]]></title>
  <link href="http://nmilford.github.com/categories/configurations/atom.xml" rel="self"/>
  <link href="http://nmilford.github.com/"/>
  <updated>2012-09-22T13:43:39-04:00</updated>
  <id>http://nmilford.github.com/</id>
  <author>
    <name><![CDATA[Nathan Milford]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Making a local CentOS mirror.]]></title>
    <link href="http://nmilford.github.com/2012/03/making-a-local-centos-mirror/"/>
    <updated>2012-03-25T16:25:39-04:00</updated>
    <id>http://nmilford.github.com/2012/03/making-a-local-centos-mirror</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/CentOS_amazing1.jpg"></p>

<p>Following up from my <a href="http://link/to/last/post">last post</a> on creating a simple yum repository, here is how to setup a local CentOS mirror.</p>

<!-- more -->


<p>This works much the same as with my last article, and here I’ll make it so your personal repo and your CentOS mirror repo can co-exist.</p>

<p>You’ll dump your CentOS mirror in /path/to/repo/CentOS, while your personal repo was put in /path/to/repo/MyRepo but the web root is at /path/to/repo/.</p>

<p>I want both CentOS 5.8 and 6.2
<code>
mkdir -p /path/to/repo/CentOS/{5.8,6.2}
</code></p>

<p>Setup some links
<code>
cd /path/to/repo/CentOS/
ln -s 5.8 5
ln -s 6.2 6
</code></p>

<p>If you didn’t setup a personal repo like I did in my last article you can do the following.
<code>
yum -y install httpd
cat &lt;&lt;EOF &gt; /etc/httpd/conf.d/repo.conf
&lt;VirtualHost *:80&gt;
ServerName repo.example.com
ServerAlias repo
ServerAdmin ops@example.com
DocumentRoot /path/to/repo/
ErrorLog logs/repo.example.com-error_log
CustomLog logs/repo.example.com-access_log common
&lt;Directory "/path/to/repo/*"&gt;
Options Indexes FollowSymLinks
Order allow,deny
Allow from all
&lt;/Directory&gt;
&lt;/VirtualHost&gt;
EOF
</code>
<code>
/etc/init.d/httpd start
</code></p>

<p>Now mirror the repos with rsync.
<code>
rsync  -avrt --delete --exclude "local*" --exclude "isos" rsync://mirrors.rit.edu/centos/5.8/ /path/to/repo/CentOS/5.8/
rsync  -avrt --delete --exclude "local*" --exclude "isos" rsync://mirrors.rit.edu/centos/6.2/ /path/to/repo/CentOS/6.2/
</code></p>

<p>Here I have a little script I put in cron to do a nightly sync. Obviously you don’t need to update it with cron if you want to keep everything at a certain level and control upgrade levels centerally.
```
cat &lt;<EOF > /etc/cron.daily/updateCentosRepo.sh</p>

<h1>!/bin/bash</h1>

<p>if [ -d /path/to/repo/CentOS/5.8 ]; then
  rsync  -avrt --delete --exclude "local*" --exclude "isos" rsync://mirrors.rit.edu/centos/5.8/ /path/to/repo/CentOS/5.8/
else
  echo "Target directory /path/to/repo/CentOS/5.8 not present."
fi</p>

<p>if [ -d /path/to/repo/CentOS/6.2 ]; then
  rsync  -avrt --delete --exclude "local*" --exclude "isos" rsync://mirrors.rit.edu/centos/6.2/ /path/to/repo/CentOS/6.2/
else
  echo "Target directory /path/to/repo/CentOS/6.2 not present."
fi
EOF
<code>
</code>
chmod +x /etc/cron.daily/updateCentosRepo.sh
<code>
Now create a new CentOS-Base.repo
</code>
cat &lt;<EOF >  /etc/yum.repos.d/CentOS-Base.repo
[base]
name=CentOS-$releasever - Base
baseurl=http://repo.example.com/CentOS/$releasever/os/$basearch/
enabled=1
gpgcheck=0</p>

<p>[updates]
name=CentOS-$releasever - Updates
baseurl=http://repo.example.com/CentOS/$releasever/updates/$basearch/
enabled=1
gpgcheck=0</p>

<p>[extras]
name=CentOS-$releasever - Extras
baseurl=http://repo.example.com/CentOS/$releasever/extras/$basearch/
enabled=1
gpgcheck=0</p>

<p>[centosplus]
name=CentOS-$releasever - Plus
baseurl=http://repo.example.com/CentOS/$releasever/centosplus/$basearch/
enabled=1
gpgcheck=0</p>

<p>[contrib]
name=CentOS-$releasever - Contrib
baseurl=http://repo.example.com/CentOS/$releasever/contrib/$basearch/
enabled=0
gpgcheck=0</p>

<p>[cr]
name=CentOS-$releasever - CR
baseurl=http://repo.example.com/CentOS/$releasever/cr/$basearch/
enabled=1
gpgcheck=0
EOF
```</p>

<p>Now you’re setup to kickstart and update like a boss.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Making a simple Yum repository.]]></title>
    <link href="http://nmilford.github.com/2012/03/making-a-simple-yum-repository/"/>
    <updated>2012-03-24T18:46:25-04:00</updated>
    <id>http://nmilford.github.com/2012/03/making-a-simple-yum-repository</id>
    <content type="html"><![CDATA[<p><img class="center" src="/images/yum.png"></p>

<p>Here is some low hanging fruit to improve your RHEL environment and simplify your work... setup a simple Yum repository.</p>

<!-- more -->


<p>There is very little magic involved in getting a yum repository up and running. You just need a web server and <code>createrepo</code>.
<code>
yum -y install createrepo httpd
</code></p>

<p>Give your repo a home.
<code>
mkdir -p /path/to/repo/MyRepo
</code></p>

<p>Go ahead and setup a vhost for the repo.
```
cat &lt;<EOF > /etc/httpd/conf.d/repo.conf
<VirtualHost *:80>
  ServerName repo.example.com
  ServerAlias repo
  ServerAdmin ops@example.com
  DocumentRoot /path/to/repo/
  ErrorLog logs/repo.example.com-error_log
  CustomLog logs/repo.example.com-access_log common
  <Directory "/path/to/repo/*"></p>

<pre><code>Options Indexes FollowSymLinks
Order allow,deny
Allow from all
</code></pre>

<p>  </Directory>
</VirtualHost>
EOF
```</p>

<p>And fire it up.
<code>
/etc/init.d/httpd start
</code></p>

<p>Now, dump your RPMs there and run createrepo. It scans the RPMs in the directory and makes the proper metadata resources.
<code>
mv *.rpm /path/to/repo/MyRepo
createrepo /path/to/repo/MyRepo
</code>
Everytime you add or remove rpms, re-run it.</p>

<p>Now on each node drop a .repo file pointing at your repository.
<code>
cat &lt;&lt;EOF_REPO &gt; /etc/yum.repos.d/MyRepo.repo
[MyRepo]
name=MyRepo
baseurl=http://repo.example.com/MyRepo
enabled=1
gpgcheck=0
EOF_REPO
</code></p>

<p>You can also make a hierarchy like <code>/path/to/repo/MyRepo/5/x86_64</code> and in the .repo file’s baseurl directive add something like:</p>

<p><code>baseurl=http://repo.example.com/MyRepo/$releasever/$basearch</code></p>

<p>will exapnd to <code>http://repo.example.com/MyRepo/5/x86_64</code>.</p>

<p>Now, you may want to setup priorities. If you want to host RPMs for stuff that may also be in other repos there may be conflicts. You can enforce a policy using yum priorities as to which repo wins out.</p>

<p><code>
yum -y install yum-priorities
</code></p>

<p>Then in your repo files set a priority, 1-99 (1 having the highest priority) where repos with no priroty set defaults to 99.</p>

<p>In my internal repo I set it to priority=1 and the MySQL 5.5.21 RPMs we grabbed from Oracle win out over the 5.0.95 RPMs in the CentOS updates repo.</p>

<p>There are a lot of more fun options but the stuff above should be just enough to get you going.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The Dell C6100 and IPMI / DRAC / MegaRAC]]></title>
    <link href="http://nmilford.github.com/2012/03/the-dell-c6100-and-ipmi-drac-megarac/"/>
    <updated>2012-03-18T11:12:54-04:00</updated>
    <id>http://nmilford.github.com/2012/03/the-dell-c6100-and-ipmi-drac-megarac</id>
    <content type="html"><![CDATA[<p><img class="left" src="/images/ipmi.jpg"></p>

<p>Over the last year Google Analytics says I've been getting a lot of hits from search that indicate there are some folks who want to know how the C-series DRAC works.</p>

<p>It is easy enough to setup like any other IPMI/DRAC system.</p>

<p>First you'll need to plug the IPMI/Management Ethernet port into your network (preferably an our of band (OOB) network seperate from your production network). In the BIOS, make sure the management port is set to 'Dedicated', earlier ones shipped with it set to 'Shared' by default which precluded the dedicated IPMI port.</p>

<!-- more -->


<p>From the rear, the port can be found here:</p>

<p><img class="center" src="/images/ipmi-cseries.jpg"></p>

<p>On the node you'll need ipmitool.</p>

<p><code>
yum -y install OpenIPMI OpenIPMI-tools
</code></p>

<p>Fire it up.
<code>
/etc/init.d/ipmi start
</code></p>

<p>Set up IPMI on the node.
<code>
ipmitool -I open lan set 1 ipsrc static
ipmitool -I open lan set 1 ipaddr IP.ADDR.YOU.WANT
ipmitool -I open lan set 1 netmask 255.255.255.0
ipmitool -I open lan set 1 defgw ipaddr GW.OF.OOB.NETWORK
ipmitool -I open lan set 1 access on
ipmitool -I open lan set 1 snmp SNMP_COMMUNITY_STRING
ipmitool -I open lan set 1 password SNMP PASSWORD
ipmitool -I open user set password 2 IPMI_PASSWORD
</code>
Confirm it all took.
```
[root@node:~]# ipmitool lan print
Set in Progress         : Set Complete
Auth Type Support       : NONE MD2 MD5 PASSWORD
Auth Type Enable        : Callback : NONE MD2 MD5 PASSWORD</p>

<pre><code>                    : User     : NONE MD2 MD5 PASSWORD 
                    : Operator : NONE MD2 MD5 PASSWORD 
                    : Admin    : NONE MD2 MD5 PASSWORD 
                    : OEM      : NONE MD2 MD5 PASSWORD 
</code></pre>

<p>IP Address Source       : Static Address
IP Address              : 10.10.10.10
Subnet Mask             : 255.255.255.0
MAC Address             : 12:34:46:78:90:ab
SNMP Community String   : oob_community_string
IP Header               : TTL=0x40 Flags=0x40 Precedence=0x00 TOS=0x08
BMC ARP Control         : ARP Responses Enabled, Gratuitous ARP Disabled
Gratituous ARP Intrvl   : 2.0 seconds
Default Gateway IP      : 10.10.10.1
Default Gateway MAC     : 00:00:00:00:00:00
Backup Gateway IP       : 0.0.0.0
Backup Gateway MAC      : 00:00:00:00:00:00
802.1q VLAN ID          : Disabled
802.1q VLAN Priority    : 0
RMCP+ Cipher Suites     : 0,1,2,3
Cipher Suite Priv Max   : uaaaXXXXXXXXXXX</p>

<pre><code>                    :     X=Cipher Suite Unused
                    :     c=CALLBACK
                    :     u=USER
                    :     o=OPERATOR
                    :     a=ADMIN
                    :     O=OEM
</code></pre>

<p>```</p>

<p>Now you can hit it via the regular ipmi tools.</p>

<p><strong>Power:</strong></p>

<p>Power cycle a remote node.
<code>
ipmitool -I lan -U root -H 10.10.10.10 -a chassis power cycle
</code></p>

<p>Power off (hard).  This cuts power like yanking the plug.
<code>
ipmitool -I lan -U root -H 10.10.10.10 -a chassis power off
</code></p>

<p>Power off (soft).  Sends an ACPI shutdown signal, which is like pressing the power button for an orderly shutdown.
<code>
ipmitool -I lan -U root -H 10.10.10.10 -a chassis power soft
</code></p>

<p><strong>System Event Log:</strong></p>

<p>Return a listing of all entries.
<code>
ipmitool -I lan -U root -H 10.10.10.10 -a sel list
</code></p>

<p>Use the two digit code from the listing to get the entry.
<code>
ipmitool -I lan -U root -H 10.10.10.10 -a sel get 0x&lt;id&gt;
</code></p>

<p>Power on Hours counter.
<code>
ipmitool -I lan -U root -H 192.168.252.161 -a chassis poh
</code></p>

<p>Get device info and serial.
<code>
ipmitool -I lan -U root -H 10.10.10.10 -a fru
</code></p>

<p><strong>Booting:</strong></p>

<p>Set the BIOS to power on the node automatically when power is restored.
<code>
ipmitool -I lan -U root -H 10.10.10.10 -a chassis policy always-on
</code></p>

<p>Set the BIOS to boot from PXE on next boot.
<code>
ipmitool -I lan -U root -H 10.10.10.10 -a chassis bootdev pxe
</code></p>

<p>Set the BIOS to boot from the first hard disk on next boot.
<code>
ipmitool -I lan -U root -H 10.10.10.10 -a chassis bootdev disk
</code></p>

<p>And finally, a super important one for locating nodes in a rack full of super-dense chassis, you can blink the status LED on the node thus.
<code>
ipmitool -I lan -U root -H 10.10.10.10 -a chassis identify
</code></p>

<p>This is all fun and good, but you can also hit it as a web interface to hit the MegaRAC.</p>

<p>Note: C6100s (and other Dell C-series) don't use the regular dell BIOS, but use an American Megatrends (AMI) BIOS, so thier DRAC is duely named the MegaRAC.</p>

<p>You can browse on over to it via it's IP, initially using http://OOB.IP.OF.NODE</p>

<p><img class="center" src="/images/megarac1.png"></p>

<p>Then you can login as root with the pasword you set with ipmitool</p>

<p><img class="center" src="/images/megarac2.png"></p>

<p>You can get all sorts of the same data from this that you can get from the cli with ipmitool, but the main thing is going to the 'Remote Control' tab across the top.</p>

<p><img class="center" src="/images/megarac3.png"></p>

<p>There you have power control, same as ipmitool gives you, but even better is the 'Console Redirection' which spawns a little Java KVM instance, much like the DRAC and Dell/Avocent KVMs do.</p>

<p>It'll ask you to download a <code>jviewer.jnlp</code> file, which you open up with Java's Web Start:</p>

<p><img class="center" src="/images/rackvm.png"></p>

<p>That's it. now you have some sweet remote control options for your Dell C-series.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Keepalived for MySQL High Availability on CentOS]]></title>
    <link href="http://nmilford.github.com/2012/03/keepalived-for-mysql-high-availability-on-centos/"/>
    <updated>2012-03-18T10:10:21-04:00</updated>
    <id>http://nmilford.github.com/2012/03/keepalived-for-mysql-high-availability-on-centos</id>
    <content type="html"><![CDATA[<p><img class="right" src="/images/keepalive-jesus.jpg"></p>

<p>We have a pretty normal single master MySQL setup.</p>

<p>Since we have a read heavy application it makes sense. Everyone writes to the master and reads from a large pool of read-only slaves.</p>

<p>But, with more and more slaves it becomes hard to manage what nodes read from what slaves.  It can get unmanageable pretty quick when configuring the app servers.</p>

<p>If we lose a MySQL slave, we have to redirect all of those servers to the new one... which descends into a bunch of temporary app config or DNS changes that sometimes are not temporary :/</p>

<p>The stuff in this article isn't my bit of magic, but it is what we have been using in one of our three datacenters for about a year now and am hoping to migrate the others to the scheme. My boss and an ex co-worker set it up an I think it is pretty nice.</p>

<!-- more -->


<p>On your loadbalancer nodes install <a href="http://blog.milford.io/2012/03/keepalived-1-1-20-rpms-for-centos-5/">keepalived</a> and <code>ipvsadm</code> (ipvsadm can be installed via yum from CentOS's base repo).</p>

<p>Set up your <code>/etc/keepalived/keepalived.conf</code> to look something like the following:</p>

<p>```  <br/>
global_defs {
  notification_email {</p>

<pre><code>your@email addr
</code></pre>

<p>  }
  notification_email_from keepalived@lb1
  smtp_server localhost
  smtp_connect_timeout 30
  # This should be unique.
  router_id lb1
}</p>

<p>vrrp_instance mysql_pool {
   # The interface we listen on.
   interface eth0</p>

<p>   # The default state, one should be master, the others should be set to SLAVE.
   state MASTER</p>

<p>   # This should be the same on all participating load balancers.
   virtual_router_id 1</p>

<p>   priority 101</p>

<p>   # Set the interface whose status to track to trigger a failover.                 <br/>
   track_interface {</p>

<pre><code> eth0
</code></pre>

<p>   }</p>

<p>  # Password for the loadbalancers to share.
  authentication {</p>

<pre><code>auth_type PASS
auth_pass password
</code></pre>

<p>  }</p>

<p>  # This is the IP address that floats between the loadbalancers.
  virtual_ipaddress {</p>

<pre><code>10.10.10.99 dev eth0
</code></pre>

<p>  }
}</p>

<h1>Here we add the virtal mysql node</h1>

<p>virtual_server 10.10.10.99 3306 {
  delay_loop 6
  # Round robin, but you can use whatever fits your needs.
  lb_algo rr
  lb_kind DR
  protocol TCP</p>

<p>  # The server to default to if all others are down, in our case our master.
  sorry_server 10.10.10.100 3306</p>

<p>  # For each server add the following.
  real_server 10.10.10.1 3306 {</p>

<pre><code>weight 10
TCP_CHECK {
  connect_port    3306
  connect_timeout 2
}
TCP_CHECK {
  connect_port    9999
  connect_timeout 2
}
</code></pre>

<p>  }
}
```</p>

<p><strong>Now, on your MySQL slaves:</strong></p>

<p>Install thttpd from <a href="http://fedoraproject.org/wiki/EPEL/">EPEL</a>:</p>

<p><code>
yum -y install thttpd
</code></p>

<p>BTW, if you're doing this in RHEL6 you need to enable the epel-testing repo to get thttpd.</p>

<p>Make it listen on port 9999.
<code>
cat &lt;&lt;eof_thttpd&gt; /etc/thttpd.conf
dir=/var/www/thttpd/html
chroot
user=thttpd
logfile=/var/log/thttpd.log
pidfile=/var/run/thttpd.pid
port=9999
EOF_THTTPD
</code></p>

<p>Fire it up.
<code>
/etc/init.d/thttpd start
</code></p>

<p>Add the shared IP so we can listen for it.</p>

<p><code>
cat &lt;&lt;eof_lo0&gt; /etc/sysconfig/network-scripts/ifcfg-lo:1
DEVICE=lo:1
IPADDR=10.10.10.99
NETMASK=255.255.255.255
ONBOOT=yes
NAME=loopback
EOF_LO0
</code></p>

<p>Bring it up.
<code>
ifup lo:1
</code></p>

<p>Now you can point ALL your app nodes to read from 10.10.10.99:3306 and they will be round-robin balanced.</p>

<p>On the active loadbalancer it should look like this. <br/>
<code>
[root@lb1:~)# ipvsadm -Ln
IP Virtual Server version 1.2.1 (size=4096)
Prot LocalAddress:Port Scheduler Flags
  -&gt; RemoteAddress:Port           Forward Weight ActiveConn InActConn
TCP  10.10.10.99:3306 rr
  -&gt; 10.10.10.1:3306              Route   10     366        2         
  -&gt; 10.10.10.2:3306              Route   10     375        1   
  -&gt; 10.10.10.3:3306              Route   10     377        1   
</code></p>

<p>My favorite part about this scheme is that any time you want to administrative remove a node from the pool you can just take thttpd down thus</p>

<p><code>/etc/init.d/thttpd stop</code></p>

<p>and keepalived chucks it because of the second TCP_CHECK statement in the config above.  This is fantastic because you don't have to shut MySQL down on the node if you need to do work with the live instance, but keep traffic off of it.</p>

<p>Also, because of the magic of VRRP if your main load balancer dies, the second one will take right over :)</p>
]]></content>
  </entry>
  
</feed>
